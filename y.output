State 28 conflicts: 1 shift/reduce
State 30 conflicts: 1 shift/reduce


Grammar

    0 $accept: root $end

    1 root: main

    2 main: instr main
    3     | %empty

    4 instr: decl
    5      | affect
    6      | if
    7      | while

    8 subBlock: block
    9         | instr

   10 block: OPENBLOCK main CLOSEBLOCK
   11      | OPENBLOCK CLOSEBLOCK

   12 expr: ID
   13     | INTEGER

   14 decl: VAR ID PV

   15 rvalue: expr
   16       | operation

   17 affect: VAR ID STOCK rvalue PV
   18       | ID STOCK rvalue PV

   19 if: IF subTest subBlock
   20   | IF subTest subBlock ELSE subBlock

   21 while: WHILE subTest subBlock

   22 subTest: OPENPAR comp CLOSEPAR

   23 operation: expr binOperator expr

   24 comp: expr comparator expr

   25 comparator: EQUALCOMP
   26           | MINCOMP
   27           | MAXCOMP

   28 binOperator: MINUS
   29            | PLUS
   30            | DIVIDE
   31            | MULTI


Terminals, with rules where they appear

$end (0) 0
error (256)
VAR (258) 14 17
ID (259) 12 14 17 18
PV (260) 14 17 18
STOCK (261) 17 18
INTEGER (262) 13
EQUALCOMP (263) 25
MINCOMP (264) 26
MAXCOMP (265) 27
IF (266) 19 20
OPENPAR (267) 22
CLOSEPAR (268) 22
OPENBLOCK (269) 10 11
CLOSEBLOCK (270) 10 11
ELSE (271) 20
WHILE (272) 21
PLUS (273) 29
MINUS (274) 28
MULTI (275) 31
DIVIDE (276) 30


Nonterminals, with rules where they appear

$accept (22)
    on left: 0
root (23)
    on left: 1, on right: 0
main (24)
    on left: 2 3, on right: 1 2 10
instr (25)
    on left: 4 5 6 7, on right: 2 9
subBlock (26)
    on left: 8 9, on right: 19 20 21
block (27)
    on left: 10 11, on right: 8
expr (28)
    on left: 12 13, on right: 15 23 24
decl (29)
    on left: 14, on right: 4
rvalue (30)
    on left: 15 16, on right: 17 18
affect (31)
    on left: 17 18, on right: 5
if (32)
    on left: 19 20, on right: 6
while (33)
    on left: 21, on right: 7
subTest (34)
    on left: 22, on right: 19 20 21
operation (35)
    on left: 23, on right: 16
comp (36)
    on left: 24, on right: 22
comparator (37)
    on left: 25 26 27, on right: 24
binOperator (38)
    on left: 28 29 30 31, on right: 23


State 0

    0 $accept: . root $end

    VAR    shift, and go to state 1
    ID     shift, and go to state 2
    IF     shift, and go to state 3
    WHILE  shift, and go to state 4

    $default  reduce using rule 3 (main)

    root    go to state 5
    main    go to state 6
    instr   go to state 7
    decl    go to state 8
    affect  go to state 9
    if      go to state 10
    while   go to state 11


State 1

   14 decl: VAR . ID PV
   17 affect: VAR . ID STOCK rvalue PV

    ID  shift, and go to state 12


State 2

   18 affect: ID . STOCK rvalue PV

    STOCK  shift, and go to state 13


State 3

   19 if: IF . subTest subBlock
   20   | IF . subTest subBlock ELSE subBlock

    OPENPAR  shift, and go to state 14

    subTest  go to state 15


State 4

   21 while: WHILE . subTest subBlock

    OPENPAR  shift, and go to state 14

    subTest  go to state 16


State 5

    0 $accept: root . $end

    $end  shift, and go to state 17


State 6

    1 root: main .

    $default  reduce using rule 1 (root)


State 7

    2 main: instr . main

    VAR    shift, and go to state 1
    ID     shift, and go to state 2
    IF     shift, and go to state 3
    WHILE  shift, and go to state 4

    $default  reduce using rule 3 (main)

    main    go to state 18
    instr   go to state 7
    decl    go to state 8
    affect  go to state 9
    if      go to state 10
    while   go to state 11


State 8

    4 instr: decl .

    $default  reduce using rule 4 (instr)


State 9

    5 instr: affect .

    $default  reduce using rule 5 (instr)


State 10

    6 instr: if .

    $default  reduce using rule 6 (instr)


State 11

    7 instr: while .

    $default  reduce using rule 7 (instr)


State 12

   14 decl: VAR ID . PV
   17 affect: VAR ID . STOCK rvalue PV

    PV     shift, and go to state 19
    STOCK  shift, and go to state 20


State 13

   18 affect: ID STOCK . rvalue PV

    ID       shift, and go to state 21
    INTEGER  shift, and go to state 22

    expr       go to state 23
    rvalue     go to state 24
    operation  go to state 25


State 14

   22 subTest: OPENPAR . comp CLOSEPAR

    ID       shift, and go to state 21
    INTEGER  shift, and go to state 22

    expr  go to state 26
    comp  go to state 27


State 15

   19 if: IF subTest . subBlock
   20   | IF subTest . subBlock ELSE subBlock

    VAR        shift, and go to state 1
    ID         shift, and go to state 2
    IF         shift, and go to state 3
    OPENBLOCK  shift, and go to state 28
    WHILE      shift, and go to state 4

    instr     go to state 29
    subBlock  go to state 30
    block     go to state 31
    decl      go to state 8
    affect    go to state 9
    if        go to state 10
    while     go to state 11


State 16

   21 while: WHILE subTest . subBlock

    VAR        shift, and go to state 1
    ID         shift, and go to state 2
    IF         shift, and go to state 3
    OPENBLOCK  shift, and go to state 28
    WHILE      shift, and go to state 4

    instr     go to state 29
    subBlock  go to state 32
    block     go to state 31
    decl      go to state 8
    affect    go to state 9
    if        go to state 10
    while     go to state 11


State 17

    0 $accept: root $end .

    $default  accept


State 18

    2 main: instr main .

    $default  reduce using rule 2 (main)


State 19

   14 decl: VAR ID PV .

    $default  reduce using rule 14 (decl)


State 20

   17 affect: VAR ID STOCK . rvalue PV

    ID       shift, and go to state 21
    INTEGER  shift, and go to state 22

    expr       go to state 23
    rvalue     go to state 33
    operation  go to state 25


State 21

   12 expr: ID .

    $default  reduce using rule 12 (expr)


State 22

   13 expr: INTEGER .

    $default  reduce using rule 13 (expr)


State 23

   15 rvalue: expr .
   23 operation: expr . binOperator expr

    PLUS    shift, and go to state 34
    MINUS   shift, and go to state 35
    MULTI   shift, and go to state 36
    DIVIDE  shift, and go to state 37

    $default  reduce using rule 15 (rvalue)

    binOperator  go to state 38


State 24

   18 affect: ID STOCK rvalue . PV

    PV  shift, and go to state 39


State 25

   16 rvalue: operation .

    $default  reduce using rule 16 (rvalue)


State 26

   24 comp: expr . comparator expr

    EQUALCOMP  shift, and go to state 40
    MINCOMP    shift, and go to state 41
    MAXCOMP    shift, and go to state 42

    comparator  go to state 43


State 27

   22 subTest: OPENPAR comp . CLOSEPAR

    CLOSEPAR  shift, and go to state 44


State 28

   10 block: OPENBLOCK . main CLOSEBLOCK
   11      | OPENBLOCK . CLOSEBLOCK

    VAR         shift, and go to state 1
    ID          shift, and go to state 2
    IF          shift, and go to state 3
    CLOSEBLOCK  shift, and go to state 45
    WHILE       shift, and go to state 4

    CLOSEBLOCK  [reduce using rule 3 (main)]

    main    go to state 46
    instr   go to state 7
    decl    go to state 8
    affect  go to state 9
    if      go to state 10
    while   go to state 11


State 29

    9 subBlock: instr .

    $default  reduce using rule 9 (subBlock)


State 30

   19 if: IF subTest subBlock .
   20   | IF subTest subBlock . ELSE subBlock

    ELSE  shift, and go to state 47

    ELSE      [reduce using rule 19 (if)]
    $default  reduce using rule 19 (if)


State 31

    8 subBlock: block .

    $default  reduce using rule 8 (subBlock)


State 32

   21 while: WHILE subTest subBlock .

    $default  reduce using rule 21 (while)


State 33

   17 affect: VAR ID STOCK rvalue . PV

    PV  shift, and go to state 48


State 34

   29 binOperator: PLUS .

    $default  reduce using rule 29 (binOperator)


State 35

   28 binOperator: MINUS .

    $default  reduce using rule 28 (binOperator)


State 36

   31 binOperator: MULTI .

    $default  reduce using rule 31 (binOperator)


State 37

   30 binOperator: DIVIDE .

    $default  reduce using rule 30 (binOperator)


State 38

   23 operation: expr binOperator . expr

    ID       shift, and go to state 21
    INTEGER  shift, and go to state 22

    expr  go to state 49


State 39

   18 affect: ID STOCK rvalue PV .

    $default  reduce using rule 18 (affect)


State 40

   25 comparator: EQUALCOMP .

    $default  reduce using rule 25 (comparator)


State 41

   26 comparator: MINCOMP .

    $default  reduce using rule 26 (comparator)


State 42

   27 comparator: MAXCOMP .

    $default  reduce using rule 27 (comparator)


State 43

   24 comp: expr comparator . expr

    ID       shift, and go to state 21
    INTEGER  shift, and go to state 22

    expr  go to state 50


State 44

   22 subTest: OPENPAR comp CLOSEPAR .

    $default  reduce using rule 22 (subTest)


State 45

   11 block: OPENBLOCK CLOSEBLOCK .

    $default  reduce using rule 11 (block)


State 46

   10 block: OPENBLOCK main . CLOSEBLOCK

    CLOSEBLOCK  shift, and go to state 51


State 47

   20 if: IF subTest subBlock ELSE . subBlock

    VAR        shift, and go to state 1
    ID         shift, and go to state 2
    IF         shift, and go to state 3
    OPENBLOCK  shift, and go to state 28
    WHILE      shift, and go to state 4

    instr     go to state 29
    subBlock  go to state 52
    block     go to state 31
    decl      go to state 8
    affect    go to state 9
    if        go to state 10
    while     go to state 11


State 48

   17 affect: VAR ID STOCK rvalue PV .

    $default  reduce using rule 17 (affect)


State 49

   23 operation: expr binOperator expr .

    $default  reduce using rule 23 (operation)


State 50

   24 comp: expr comparator expr .

    $default  reduce using rule 24 (comp)


State 51

   10 block: OPENBLOCK main CLOSEBLOCK .

    $default  reduce using rule 10 (block)


State 52

   20 if: IF subTest subBlock ELSE subBlock .

    $default  reduce using rule 20 (if)
